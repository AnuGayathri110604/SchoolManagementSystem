/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package schoolmanagementsystem;

//import com.mysql.cj.xdevapi.Statement;
import java.awt.HeadlessException;
import java.sql.*;
import javax.swing.JFrame;
import java.sql.Statement;
import java.io.File;
import java.util.*;
import javax.swing.JPasswordField;
import java.sql.PreparedStatement;
import javax.swing.JFrame;
import javax.mail.*;
import javax.mail.internet.*;
import java.sql.SQLException;
import javax.swing.*;

/**
 *
 * @author ASUS
 */
public class Login1 extends javax.swing.JPanel {

    private String storedCaptcha;
    private String captcha;
    private static final int CAPTCHA_LENGTH = 6;
    private javax.swing.JLabel captchaLabel;
    private javax.swing.JTextField captchaInput; 
    
    private JFrame parentFrame; // Add this field to store the reference to the parent frame

public Login1(JFrame parentFrame) {
    this.parentFrame = parentFrame; // Initialize the parent frame
    initComponents();
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        pass = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        signup = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 51, 102));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(255, 51, 102));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("  SCHOOL MANAGEMENT SYSTEM");
        jLabel1.setOpaque(true);
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 412, 52));

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setText("LOGIN PAGE");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 90, -1, -1));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 17)); // NOI18N
        jLabel3.setText("UserName:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 320, -1, -1));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 17)); // NOI18N
        jLabel4.setText("Password:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 380, -1, -1));

        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });
        add(name, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 320, 296, -1));
        add(pass, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 380, 296, -1));

        jButton1.setBackground(new java.awt.Color(204, 204, 204));
        jButton1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButton1.setText("Login");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 430, 80, -1));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/schoolmanagementsystem/unnamed (1).png"))); // NOI18N
        jLabel8.setText("jLabel8");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 130, 139, 139));

        signup.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        signup.setForeground(new java.awt.Color(255, 255, 255));
        signup.setText("New user? Sign Up?");
        signup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                signupMouseClicked(evt);
            }
        });
        add(signup, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 520, -1, 20));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Forgot password?");
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 520, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      String un = name.getText();
    String p = pass.getText();

    try {
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/sms", "root", "");
        Statement st = conn.createStatement();
        String sql = "SELECT COUNT(*) FROM signup WHERE name = '" + un + "'";
        ResultSet userCountResult = st.executeQuery(sql);
        userCountResult.next();
        int userCount = userCountResult.getInt(1);

        if (userCount > 0) {
            // The user exists in the database
            sql = "SELECT * FROM signup WHERE name = '" + un + "'";
            ResultSet rs = st.executeQuery(sql);

            boolean passwordMatch = false;

            while (rs.next()) {
                String password = rs.getString("password1");

                if (p.equals(password)) {
                    passwordMatch = true;

                    // Close the parent JFrame
                    JFrame parentFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
                    parentFrame.dispose();

                    // Open the welcome frame
                    new welcome().setVisible(true);
                    break;
                }
            }

            if (!passwordMatch) {
                JOptionPane.showMessageDialog(this, "Incorrect password.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Username not found.");
        }

        conn.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error while establishing the connection");
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    private void signupMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signupMouseClicked
        // TODO add your handling code here:
        Signup su = new Signup();
    su.setLocationRelativeTo(null);
    su.setVisible(true);
    this.getTopLevelAncestor().setVisible(false); 
    }//GEN-LAST:event_signupMouseClicked
    private void generateCaptcha() {
       if (storedCaptcha == null) 
        storedCaptcha = generateRandomString(CAPTCHA_LENGTH);

    captcha = storedCaptcha;

    boolean captchaMatch = false;
    while (!captchaMatch) {
        // Show a dialog to input the CAPTCHA
        String userInput = JOptionPane.showInputDialog(null, "Enter the Captcha: " + captcha);

        if (userInput == null) {
            // User clicked cancel or closed the dialog
            return; // Exit the loop
        }

        captchaMatch = captcha.equals(userInput);

        if (!captchaMatch) {
            JOptionPane.showMessageDialog(null, "Incorrect Captcha! Please try again.");
        }
    }

    // CAPTCHA is correct, proceed with the password reset logic
    String newPassword = requestPasswordWithValidation();
    if (newPassword != null) {
        // Password validation and storing in the database is already handled in requestPasswordWithValidation()
    } else {
        JOptionPane.showMessageDialog(null, "Password reset canceled.");
    }
}
private void storeNewPasswordInDatabase(String newPassword) {
    String un = name.getText();
    try {
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/sms", "root", "");
        PreparedStatement updatePassword = conn.prepareStatement("UPDATE signup SET password1 = ? WHERE name = ?");
        updatePassword.setString(1, newPassword);
        updatePassword.setString(2, un);
        updatePassword.executeUpdate();
        JOptionPane.showMessageDialog(null, "Password Reset Successful.");
        conn.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error while updating password in the database");
    }
}
private String requestPasswordWithValidation() {
    JPasswordField newPasswordField = new JPasswordField();
    JPasswordField confirmPasswordField = new JPasswordField();
    Object[] message = {
        "New Password:", newPasswordField,
        "Confirm Password:", confirmPasswordField
    };

    while (true) {
        int option = JOptionPane.showConfirmDialog(
            null,
            message,
            "Reset Password",
            JOptionPane.OK_CANCEL_OPTION
        );

        if (option == JOptionPane.OK_OPTION) {
            String newPassword = new String(newPasswordField.getPassword());
            String confirmPassword = new String(confirmPasswordField.getPassword());

            if (newPassword.equals(confirmPassword) && isValidPassword(newPassword)) {
                // Store the new password in the database
                storeNewPasswordInDatabase(newPassword);

                return newPassword;
            } else {
                String feedback = checkStrength(newPassword);
                if (!newPassword.equals(confirmPassword)) {
                    feedback += "- Passwords do not match.\n";
                }
                JOptionPane.showMessageDialog(null, feedback);
            }
        } else {
            return null;
        }
    }
}
/*private String requestConfirmPassword() {
    JPasswordField confirmPasswordField = new JPasswordField();
    int option = JOptionPane.showConfirmDialog(
        null,
        new Object[] { "Confirm Password:", confirmPasswordField },
        "Reset Password",
        JOptionPane.OK_CANCEL_OPTION
    );

    if (option == JOptionPane.OK_OPTION) {
        return new String(confirmPasswordField.getPassword());
    }
    return null;
}*/
   private String checkStrength(String input) {
    int n = input.length();
    boolean hasLower = false, hasUpper = false, hasDigit = false, specialChar = false;
    String specialCharacters = "!@#$%^&*()_-+=|{}[]:;<>,.?/";
    for (char i : input.toCharArray()) {
        if (Character.isLowerCase(i)) {
            hasLower = true;
        }
        if (Character.isUpperCase(i)) {
            hasUpper = true;
        }
        if (Character.isDigit(i)) {
            hasDigit = true;
        }
        if (specialCharacters.indexOf(i) != -1) {
            specialChar = true;
        }
    }

    StringBuilder feedback = new StringBuilder();
    if (!hasDigit) {
        feedback.append("- Add at least one digit.\n");
    }
    if (!hasLower) {
        feedback.append("- Add at least one lowercase letter.\n");
    }
    if (!hasUpper) {
        feedback.append("- Add at least one uppercase letter.\n");
    }
    if (!specialChar) {
        feedback.append("- Add at least one special character.\n");
    }
    if (n < 6) {
        feedback.append("- Password should be at least 6 characters long.\n");
    }

    if (hasDigit && hasLower && hasUpper && specialChar && (n >= 8)) {
        feedback.insert(0, "Strength of password: Strong\n");
    } else if ((hasLower && hasUpper && specialChar) && (n >= 6)) {
        feedback.insert(0, "Strength of password: Moderate\n");
    } else {
        feedback.insert(0, "Strength of password: Weak\n");
    }

    return feedback.toString();
}
    private boolean isValidPassword(String password) {
    // Check if the password meets the required conditions
    return password.length() >= 8 &&
           password.matches(".*[a-z].*") &&
           password.matches(".*[A-Z].*") &&
           password.matches(".*\\d.*");
}

    private String generateRandomString(int length) {
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        StringBuilder stringBuilder = new StringBuilder();
        Random random = new Random();
        for (int i = 0; i < length; i++) {
            int index = random.nextInt(characters.length());
            stringBuilder.append(characters.charAt(index));
        }
        return stringBuilder.toString();
    }
 
    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        String un = name.getText();
    String p = pass.getText();
    
    if (un.isEmpty() || p.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter both Username and Password.");
    } else {
        generateCaptcha();
    }
        
    }//GEN-LAST:event_jLabel6MouseClicked
public static void main(String args[]){
    java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new JFrame("Login");
            Login1 loginPanel = new Login1(frame); // Pass the parent frame reference
            frame.add(loginPanel);
            frame.pack();
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setVisible(true);
            }
        });
    
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JTextField name;
    private javax.swing.JPasswordField pass;
    private javax.swing.JLabel signup;
    // End of variables declaration//GEN-END:variables

    private void dispose() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    void pack() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    
    

    }
